{
  "name": "Primes",
  "tagline": "Simple prime number generators in various programming languages",
  "body": "== Primes - multi-language prime number algorithm optimization\r\n\r\nThis project is motivated by:\r\n\r\n1. My desire to have a small, self contained project to learn [GIT][] version control and [Markdown][] documentation methodology.\r\n2. To use the project to practice pushing changes to my local [GITLAB][] server and to my accounts at [GitHub][] and [GitLab][].\r\n3. The Daniel Clifford presentation [Breaking the JavaScript Speed Limit with V8][] from 2012 Google IO.\r\n4. My interest in [prime numbers][].\r\n5. My interest in [programming languages][].\r\n6. My interest in [code optimization][].\r\n\r\nIn * Breaking the JavaScript Speed Limit with V8, * Daniel Clifford shows how to optimize a prime number generator written in [Javascript][]\r\nusing knowledge of the underlying V8 implementation written in [C++][]. In his [slide presetation][], He shows examples of the generator written in javascript and C++,\r\nthen compares the execution speed of the javascript version running under V8 to that of the C++ version.\r\n\r\nClifford's prime number generator finds the 25,000th prime number by calculating the first 25,000 primes. The algorithm is stated on [slide 15][] and\r\nthe two implementations of the algorithm are presented on [slide 16][]. The initial execution results are on [slide 17][].\r\n\r\nClifford's implementations are the starting point for my Primes project. \r\n\r\nThe initial structure of project is:\r\n\r\n    $ tree git/primes\r\n    git/primes\r\n    ├── c++\r\n    │   ├── primes.cc\r\n    │   ├── README.md\r\n    │   └── run.sh\r\n    ├── ChangeLog\r\n    ├── nodejs\r\n    │   ├── primes.js\r\n    │   ├── README.md\r\n    │   └── run.sh\r\n    ├── README.md\r\n    └── run.sh\r\n\r\n\r\nThe * README.md * files contain documentation notes for the individual language implementations. \r\nThe top-most file is the note you are reading.\r\n \r\nI used [nodejs][] instead of * V8 * to run my javascript implementation, since nodejs uses V8 as the javascript engine,\r\nand nodejs is a useful server-side tool. My version of `nodejs/primes.js` is modified to use the `console.log` method instead\r\nof `print`. The `run.sh` files are shell scripts to compile and time execution.\r\n\r\nOn my Intel core i5 running Ubuntu 14.04 amd64:\r\n\r\n    $ cd git/primes\r\n    $ ./run.sh\r\n    /home/adickey/git/primes/c++\r\n    g++ primes.cc -o primes\r\n    time primes\r\n    287107\r\n    \r\n    real    0m1.768s\r\n    user    0m1.764s\r\n    sys     0m0.000s\r\n    /home/adickey/git/primes/nodejs\r\n    time node primes.js\r\n    287107\r\n    \r\n    real    0m9.886s\r\n    user    0m9.932s\r\n    sys     0m0.012s\r\n\r\nThese results are similar to [slide 17][].\r\n\r\nMy initial git setup was:\r\n\r\n    $ cd git/primes\r\n    $ git init\r\n    $ git add ChangeLog README.md run.sh c++/primes.cc c++/README.md c++/run.md nodejs/primes.js nodejs/README.md nodejs/run.md\r\n\r\n[GIT]: https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control\r\n[GITLAB]: https://about.gitlab.com/\r\n[GitHub]: https://github.com/alandickey\r\n[GitLab]: https://gitlab.com/u/alandickey\r\n[Markdown]: http://daringfireball.net/\r\n[Breaking the JavaScript Speed Limit with V8]: https://developers.google.com/v8/videos#video0a\r\n[slide presentation]: http://v8-io12.appspot.com/\r\n[slide15]: http://v8-io12.appspot.com/#15\r\n[slide16]: http://v8-io12.appspot.com/#16\r\n[slide17]: http://v8-io12.appspot.com/#17\r\n[prime numbers]: https://en.wikipedia.org/wiki/Prime_number\r\n[programming languages]: https://en.wikipedia.org/wiki/Programming_language\r\n[code optimization]: http://c2.com/cgi/wiki?RulesOfOptimizationi\r\n[C++]: http://en.cppreference.com/w/\r\n[Javascript]: http://www.ecma-international.org/ecma-262/6.0/\r\n[nodejs]: https://nodejs.org\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}